#!/usr/bin/env python
import os
import email
import mailbox
import sys

#
# Parse an mbox file to create a text file containing the most important information about a mail
# e.g. to/from/subject and content 
#
# Based on code found here;
#http://stackoverflow.com/questions/7166922/extracting-the-body-of-an-email-from-mbox-file-decoding-it-to-plain-text-regard



def getcharsets(msg):
    charsets = set({})
    for c in msg.get_charsets():
        if c is not None:
            charsets.update([c])
    return charsets

def handleerror(errmsg, emailmsg,cs):
    print()
    print(errmsg)
    print("This error occurred while decoding with ",cs," charset.")
    print("These charsets were found in the one email.",getcharsets(emailmsg))
    print("This is the subject:",emailmsg['subject'])
    print("This is the sender:",emailmsg['From'])


def get_message_body(msg):
    body = None
    #Walk through the parts of the email to find the text body.    
    if msg.is_multipart():    
        for part in msg.walk():

            # If part is multipart, walk through the subparts.            
            if part.is_multipart(): 

                for subpart in part.walk():
                    if subpart.get_content_type() == 'text/plain':
                        # Get the subpart payload (i.e the message body)
                        body = subpart.get_payload(decode=True) 
                        #charset = subpart.get_charset()

            # Part isn't multipart so get the email body
            elif part.get_content_type() == 'text/plain':
                body = part.get_payload(decode=True)
                #charset = part.get_charset()

    # If this isn't a multi-part message then get the payload (i.e the message body)
    elif msg.get_content_type() == 'text/plain':
        body = msg.get_payload(decode=True) 

   # No checking done to match the charset with the correct part. 
    for charset in getcharsets(msg):
        try:
            body = body.decode(charset)
        except UnicodeDecodeError:
            handleerror("UnicodeDecodeError: encountered.",msg,charset)
        except AttributeError:
             handleerror("AttributeError: encountered" ,msg,charset)
    return body  



if len(sys.argv) <> 2:
	print "Usage: zoeken bestand"
	sys.exit(1)

#print sys.argv[1]
#source_mbox = os.path.expanduser("~/Mail/arch")
source_mbox = sys.argv[1]
destination_file = os.path.expanduser("/tmp/zoeken")
	

f = open(destination_file , 'w+')
mbox = mailbox.mbox(source_mbox)
for msg in mbox:
	try:
		f.write( "From: %s\n" % msg['From'] )
		f.write( "To: %s\n" % msg['To'] )
		f.write( "Date: %s\n" % msg['Date'] )
		f.write( "Subject: %s\n" % msg['Subject'] )
		f.write( "\n%s\n" % get_message_body(msg) )
	except ValueError:
		print "ee"
f.close()
os.system("vim /tmp/zoeken")
#print "zoek database opgeslagen in %s" % destination_file
